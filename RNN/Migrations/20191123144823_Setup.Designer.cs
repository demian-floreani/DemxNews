// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RNN.Models;

namespace RNN.Migrations
{
    [DbContext(typeof(RNNContext))]
    [Migration("20191123144823_Setup")]
    partial class Setup
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RNN.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new { Id = 1, Name = "Author1" }
                    );
                });

            modelBuilder.Entity("RNN.Models.Entry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuthorId");

                    b.Property<string>("Body");

                    b.Property<DateTime>("Date");

                    b.Property<int?>("GroupingId");

                    b.Property<string>("HeadLine");

                    b.Property<string>("Img");

                    b.Property<string>("Paragraph");

                    b.Property<int>("Rank");

                    b.Property<int?>("TitleId");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GroupingId");

                    b.HasIndex("TitleId");

                    b.ToTable("Entries");
                });

            modelBuilder.Entity("RNN.Models.EntryToTopic", b =>
                {
                    b.Property<int>("TopicId");

                    b.Property<int>("EntryId");

                    b.HasKey("TopicId", "EntryId");

                    b.HasIndex("EntryId");

                    b.ToTable("EntryToTopics");
                });

            modelBuilder.Entity("RNN.Models.Grouping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("Rank");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("Grouping");

                    b.HasData(
                        new { Id = 1, Name = "", Rank = 1, Type = "Headlines" }
                    );
                });

            modelBuilder.Entity("RNN.Models.Title", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Titles");

                    b.HasData(
                        new { Id = 1, Name = "Editorial" },
                        new { Id = 2, Name = "Opinion" },
                        new { Id = 3, Name = "UK News" },
                        new { Id = 4, Name = "UK Politics" },
                        new { Id = 5, Name = "US News" },
                        new { Id = 6, Name = "US Politics" },
                        new { Id = 7, Name = "EU News" },
                        new { Id = 8, Name = "EU Entry" },
                        new { Id = 9, Name = "Italian News" },
                        new { Id = 10, Name = "Italian Politics" }
                    );
                });

            modelBuilder.Entity("RNN.Models.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Topics");

                    b.HasData(
                        new { Id = 1, Name = "Topic 1" },
                        new { Id = 2, Name = "Topic 2" },
                        new { Id = 3, Name = "Topic 3" },
                        new { Id = 4, Name = "Topic 4" },
                        new { Id = 5, Name = "Topic 5" },
                        new { Id = 6, Name = "Topic 6" },
                        new { Id = 7, Name = "Topic 7" },
                        new { Id = 8, Name = "Topic 8" },
                        new { Id = 9, Name = "Topic 9" },
                        new { Id = 10, Name = "Topic 10" },
                        new { Id = 11, Name = "Topic 11" },
                        new { Id = 12, Name = "Topic 12" },
                        new { Id = 13, Name = "Topic 13" },
                        new { Id = 14, Name = "Topic 14" }
                    );
                });

            modelBuilder.Entity("RNN.Models.Entry", b =>
                {
                    b.HasOne("RNN.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("RNN.Models.Grouping", "Grouping")
                        .WithMany()
                        .HasForeignKey("GroupingId");

                    b.HasOne("RNN.Models.Title", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId");
                });

            modelBuilder.Entity("RNN.Models.EntryToTopic", b =>
                {
                    b.HasOne("RNN.Models.Entry", "Entry")
                        .WithMany("EntryToTopics")
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RNN.Models.Topic", "Topic")
                        .WithMany("EntryToTopics")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
