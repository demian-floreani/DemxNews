// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RNN.Models;

namespace RNN.Migrations
{
    [DbContext(typeof(RNNContext))]
    [Migration("20191008181454_Update1")]
    partial class Update1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RNN.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new { Id = 1, Name = "RenegadeNews" }
                    );
                });

            modelBuilder.Entity("RNN.Models.Edition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Editions");
                });

            modelBuilder.Entity("RNN.Models.Editorial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId");

                    b.Property<string>("Body");

                    b.Property<string>("Img");

                    b.Property<bool>("IsFeatured");

                    b.Property<string>("Paragraph");

                    b.Property<string>("Title");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Editorials");

                    b.HasData(
                        new { Id = 1, AuthorId = 1, Body = "", Img = "", IsFeatured = true, Paragraph = "Leadership campaign falters as he refuses to respond to questions at hustings about late-night argument with Carrie Symonds", Title = "Boris Johnson under fire over row with partner as top Tories raise fears", Url = "" }
                    );
                });

            modelBuilder.Entity("RNN.Models.Opinion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId");

                    b.Property<string>("Body");

                    b.Property<string>("Img");

                    b.Property<bool>("IsFeatured");

                    b.Property<string>("Paragraph");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Opinions");

                    b.HasData(
                        new { Id = 1, AuthorId = 1, Body = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.", Img = "nature.jpg", IsFeatured = true, Paragraph = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore", Title = "How the Right Must Embrace Environmen- talism" },
                        new { Id = 2, AuthorId = 1, Body = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.", Img = "nature.jpg", IsFeatured = true, Paragraph = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore", Title = "Opinion piece 2" },
                        new { Id = 3, AuthorId = 1, Body = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.", Img = "nature.jpg", IsFeatured = true, Paragraph = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore", Title = "Opinion piece 3" },
                        new { Id = 4, AuthorId = 1, Body = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.", Img = "nature.jpg", IsFeatured = false, Paragraph = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore", Title = "Opinion piece 4" },
                        new { Id = 5, AuthorId = 1, Body = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.", Img = "nature.jpg", IsFeatured = false, Paragraph = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore", Title = "Opinion piece 5" },
                        new { Id = 6, AuthorId = 1, Body = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.", Img = "nature.jpg", IsFeatured = false, Paragraph = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore", Title = "Opinion piece 6" },
                        new { Id = 7, AuthorId = 1, Body = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.", Img = "nature.jpg", IsFeatured = false, Paragraph = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore", Title = "Opinion piece 7" }
                    );
                });

            modelBuilder.Entity("RNN.Models.OpinionToTopic", b =>
                {
                    b.Property<int>("TopicId");

                    b.Property<int>("OpinionId");

                    b.HasKey("TopicId", "OpinionId");

                    b.HasIndex("OpinionId");

                    b.ToTable("OpinionToTopic");

                    b.HasData(
                        new { TopicId = 30, OpinionId = 4 },
                        new { TopicId = 29, OpinionId = 5 },
                        new { TopicId = 5, OpinionId = 6 },
                        new { TopicId = 2, OpinionId = 7 }
                    );
                });

            modelBuilder.Entity("RNN.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<bool>("IsFeatured");

                    b.Property<string>("Title");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("Posts");

                    b.HasData(
                        new { Id = 1, Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsFeatured = false, Title = "Journalists Detained During First Day of Bilderberg", Url = "" },
                        new { Id = 2, Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsFeatured = false, Title = "RON PAUL: US/UK Trying To Kill Assange?", Url = "" },
                        new { Id = 3, Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsFeatured = false, Title = "Merkel Attacks Trump in Harvard Speech", Url = "" },
                        new { Id = 4, Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsFeatured = false, Title = "Bye-bye Bolton?", Url = "" },
                        new { Id = 5, Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsFeatured = false, Title = "White House launches tool to report censorship on Facebook", Url = "" },
                        new { Id = 6, Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsFeatured = false, Title = "Barr: Mueller could have reached a decision on obstruction", Url = "" },
                        new { Id = 7, Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsFeatured = false, Title = "U.S. Economy Grew 3.1% in First Quarter", Url = "" },
                        new { Id = 8, Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsFeatured = false, Title = "Donald Trump: 'I Got Me Elected'", Url = "" },
                        new { Id = 9, Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsFeatured = false, Title = "Test post: put all the content here for the post title 1", Url = "" },
                        new { Id = 10, Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsFeatured = false, Title = "Test post: put all the content here for the post title 2", Url = "" },
                        new { Id = 11, Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsFeatured = false, Title = "Test post: put all the content here for the post title 3", Url = "" },
                        new { Id = 12, Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsFeatured = false, Title = "Test post: put all the content here for the post title 4", Url = "" },
                        new { Id = 13, Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsFeatured = false, Title = "Test post: put all the content here for the post title 5", Url = "" },
                        new { Id = 14, Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsFeatured = false, Title = "Test post: put all the content here for the post title 6", Url = "" },
                        new { Id = 15, Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsFeatured = false, Title = "Test post: put all the content here for the post title 7", Url = "" },
                        new { Id = 16, Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsFeatured = false, Title = "Test post: put all the content here for the post title 8", Url = "" }
                    );
                });

            modelBuilder.Entity("RNN.Models.PostToTopic", b =>
                {
                    b.Property<int>("TopicId");

                    b.Property<int>("PostId");

                    b.HasKey("TopicId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("PostToTopics");

                    b.HasData(
                        new { TopicId = 8, PostId = 1 },
                        new { TopicId = 2, PostId = 2 },
                        new { TopicId = 15, PostId = 3 },
                        new { TopicId = 16, PostId = 4 },
                        new { TopicId = 25, PostId = 5 },
                        new { TopicId = 19, PostId = 7 },
                        new { TopicId = 5, PostId = 8 },
                        new { TopicId = 29, PostId = 9 },
                        new { TopicId = 30, PostId = 10 },
                        new { TopicId = 31, PostId = 11 },
                        new { TopicId = 33, PostId = 12 },
                        new { TopicId = 2, PostId = 13 },
                        new { TopicId = 30, PostId = 14 },
                        new { TopicId = 30, PostId = 15 },
                        new { TopicId = 30, PostId = 16 }
                    );
                });

            modelBuilder.Entity("RNN.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("Rank");

                    b.HasKey("Id");

                    b.ToTable("Subjects");

                    b.HasData(
                        new { Id = 1, Name = "Migration", Rank = 1 },
                        new { Id = 2, Name = "Boom & Bust", Rank = 2 },
                        new { Id = 3, Name = "Climate Activism", Rank = 3 },
                        new { Id = 4, Name = "Free Speech", Rank = 4 },
                        new { Id = 5, Name = "Deep State", Rank = 5 }
                    );
                });

            modelBuilder.Entity("RNN.Models.SubjectToTopic", b =>
                {
                    b.Property<int>("SubjectId");

                    b.Property<int>("TopicId");

                    b.HasKey("SubjectId", "TopicId");

                    b.HasIndex("TopicId");

                    b.ToTable("SubjectToTopics");
                });

            modelBuilder.Entity("RNN.Models.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Topics");

                    b.HasData(
                        new { Id = 1, Name = "Brexit" },
                        new { Id = 2, Name = "Deep State" },
                        new { Id = 3, Name = "Corruption" },
                        new { Id = 4, Name = "Money in Politics" },
                        new { Id = 5, Name = "Donald Trump" },
                        new { Id = 6, Name = "EU" },
                        new { Id = 7, Name = "Neo-Liberalism" },
                        new { Id = 8, Name = "Bilderberg" },
                        new { Id = 9, Name = "Federal Reserve" },
                        new { Id = 10, Name = "NWO" },
                        new { Id = 11, Name = "Migrants" },
                        new { Id = 12, Name = "Mass Immigration" },
                        new { Id = 13, Name = "Islamism" },
                        new { Id = 14, Name = "Assange" },
                        new { Id = 15, Name = "Merkel" },
                        new { Id = 16, Name = "Neo-Cons" },
                        new { Id = 17, Name = "RINOs" },
                        new { Id = 18, Name = "Crony Capitalism" },
                        new { Id = 19, Name = "Economy" },
                        new { Id = 20, Name = "Animal Rights" },
                        new { Id = 21, Name = "GMO" },
                        new { Id = 22, Name = "5G" },
                        new { Id = 23, Name = "Wifi" },
                        new { Id = 24, Name = "Censorship" },
                        new { Id = 25, Name = "Tech Fascism" },
                        new { Id = 26, Name = "First Amendment" },
                        new { Id = 27, Name = "Big Brother" },
                        new { Id = 28, Name = "Wikipedia" },
                        new { Id = 29, Name = "Viktor Orban" },
                        new { Id = 30, Name = "Salvini" },
                        new { Id = 31, Name = "Junker" },
                        new { Id = 32, Name = "Refugees" },
                        new { Id = 33, Name = "Integration" }
                    );
                });

            modelBuilder.Entity("RNN.Models.Editorial", b =>
                {
                    b.HasOne("RNN.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RNN.Models.Opinion", b =>
                {
                    b.HasOne("RNN.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RNN.Models.OpinionToTopic", b =>
                {
                    b.HasOne("RNN.Models.Opinion", "Opinion")
                        .WithMany("OpinionToTopic")
                        .HasForeignKey("OpinionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RNN.Models.Topic", "Topic")
                        .WithMany("OpinionToTopic")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RNN.Models.PostToTopic", b =>
                {
                    b.HasOne("RNN.Models.Post", "Post")
                        .WithMany("PostToTopic")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RNN.Models.Topic", "Topic")
                        .WithMany("PostToTopic")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RNN.Models.SubjectToTopic", b =>
                {
                    b.HasOne("RNN.Models.Subject", "Subject")
                        .WithMany("SubjectToTopic")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RNN.Models.Topic", "Topic")
                        .WithMany("SubjectToTopic")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
