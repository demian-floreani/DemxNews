// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RNN.Models;

namespace RNN.Migrations
{
    [DbContext(typeof(RNNContext))]
    [Migration("20200304150711_Adding-messages")]
    partial class Addingmessages
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RNN.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new { Id = 1, Name = "Renegade News" }
                    );
                });

            modelBuilder.Entity("RNN.Models.Entry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuthorId");

                    b.Property<string>("Body");

                    b.Property<DateTime>("Date");

                    b.Property<string>("HeadLine");

                    b.Property<string>("Img");

                    b.Property<int>("PageViews");

                    b.Property<string>("Paragraph");

                    b.Property<int>("Rank");

                    b.Property<string>("Slug");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasFilter("[Slug] IS NOT NULL");

                    b.ToTable("Entries");
                });

            modelBuilder.Entity("RNN.Models.EntryToTopic", b =>
                {
                    b.Property<int>("TopicId");

                    b.Property<int>("EntryId");

                    b.HasKey("TopicId", "EntryId");

                    b.HasIndex("EntryId");

                    b.ToTable("EntryToTopics");
                });

            modelBuilder.Entity("RNN.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("RNN.Models.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Topics");

                    b.HasData(
                        new { Id = 1, Name = "Topic 1" },
                        new { Id = 2, Name = "Topic 2" },
                        new { Id = 3, Name = "Topic 3" }
                    );
                });

            modelBuilder.Entity("RNN.Models.Entry", b =>
                {
                    b.HasOne("RNN.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");
                });

            modelBuilder.Entity("RNN.Models.EntryToTopic", b =>
                {
                    b.HasOne("RNN.Models.Entry", "Entry")
                        .WithMany("EntryToTopics")
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RNN.Models.Topic", "Topic")
                        .WithMany("EntryToTopics")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
