// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RNN.Models;

namespace RNN.Migrations
{
    [DbContext(typeof(RNNContext))]
    [Migration("20191024141022_u3")]
    partial class u3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RNN.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new { Id = 1, Name = "Autho1" }
                    );
                });

            modelBuilder.Entity("RNN.Models.Entry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int?>("GroupingId");

                    b.Property<string>("HeadLine");

                    b.Property<bool>("IsFeatured");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("GroupingId");

                    b.ToTable("Entry");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Entry");
                });

            modelBuilder.Entity("RNN.Models.EntryToTopic", b =>
                {
                    b.Property<int>("TopicId");

                    b.Property<int>("EntryId");

                    b.HasKey("TopicId", "EntryId");

                    b.HasIndex("EntryId");

                    b.ToTable("EntryToTopics");

                    b.HasData(
                        new { TopicId = 1, EntryId = 1 },
                        new { TopicId = 2, EntryId = 2 },
                        new { TopicId = 3, EntryId = 3 },
                        new { TopicId = 4, EntryId = 4 },
                        new { TopicId = 5, EntryId = 5 },
                        new { TopicId = 6, EntryId = 6 },
                        new { TopicId = 7, EntryId = 7 },
                        new { TopicId = 1, EntryId = 8 },
                        new { TopicId = 2, EntryId = 9 },
                        new { TopicId = 3, EntryId = 10 },
                        new { TopicId = 4, EntryId = 11 },
                        new { TopicId = 1, EntryId = 12 },
                        new { TopicId = 2, EntryId = 13 },
                        new { TopicId = 1, EntryId = 14 },
                        new { TopicId = 2, EntryId = 14 },
                        new { TopicId = 3, EntryId = 15 },
                        new { TopicId = 4, EntryId = 16 },
                        new { TopicId = 5, EntryId = 17 },
                        new { TopicId = 6, EntryId = 18 },
                        new { TopicId = 7, EntryId = 19 },
                        new { TopicId = 1, EntryId = 20 },
                        new { TopicId = 1, EntryId = 21 }
                    );
                });

            modelBuilder.Entity("RNN.Models.Grouping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("Rank");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("Grouping");

                    b.HasData(
                        new { Id = 1, Name = "EU Migrant Crisis", Rank = 1, Type = "In Focus" },
                        new { Id = 2, Name = "Grouping 2", Rank = 2 },
                        new { Id = 3, Name = "Grouping 3", Rank = 3 },
                        new { Id = 4, Name = "Grouping 4", Rank = 4 }
                    );
                });

            modelBuilder.Entity("RNN.Models.Title", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Titles");

                    b.HasData(
                        new { Id = 1, Name = "Editorial" },
                        new { Id = 2, Name = "Opinion" },
                        new { Id = 3, Name = "UK News" },
                        new { Id = 4, Name = "UK Politics" },
                        new { Id = 5, Name = "US News" },
                        new { Id = 6, Name = "US Politics" },
                        new { Id = 7, Name = "EU News" },
                        new { Id = 8, Name = "EU Article" },
                        new { Id = 9, Name = "Italian News" },
                        new { Id = 10, Name = "Italian Politics" }
                    );
                });

            modelBuilder.Entity("RNN.Models.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Topics");

                    b.HasData(
                        new { Id = 1, Name = "Topic 1" },
                        new { Id = 2, Name = "Topic 2" },
                        new { Id = 3, Name = "Topic 3" },
                        new { Id = 4, Name = "Topic 4" },
                        new { Id = 5, Name = "Topic 5" },
                        new { Id = 6, Name = "Topic 6" },
                        new { Id = 7, Name = "Topic 7" },
                        new { Id = 8, Name = "Topic 8" },
                        new { Id = 9, Name = "Topic 9" },
                        new { Id = 10, Name = "Topic 10" },
                        new { Id = 11, Name = "Topic 11" },
                        new { Id = 12, Name = "Topic 12" },
                        new { Id = 13, Name = "Topic 13" },
                        new { Id = 14, Name = "Topic 14" }
                    );
                });

            modelBuilder.Entity("RNN.Models.Article", b =>
                {
                    b.HasBaseType("RNN.Models.Entry");

                    b.Property<int?>("AuthorId");

                    b.Property<string>("Body");

                    b.Property<string>("Img");

                    b.Property<string>("Paragraph");

                    b.Property<int?>("TitleId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("TitleId");

                    b.ToTable("Article");

                    b.HasDiscriminator().HasValue("Article");

                    b.HasData(
                        new { Id = 12, Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), HeadLine = "Boris Johnson under fire over row with partner as top Tories raise fears", IsFeatured = true, Url = "", AuthorId = 1, Body = "", Img = "Article.jpg", Paragraph = "Leadership campaign falters as he refuses to respond to questions at hustings about late-night argument with Carrie Symonds", TitleId = 1 },
                        new { Id = 13, Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), HeadLine = "MPs debate Boris Johnson's deal as People's Vote march sets off – live Article", IsFeatured = true, Url = "", AuthorId = 1, Body = "", Img = "Article.jpg", Paragraph = "Leadership campaign falters as he refuses to respond to questions at hustings about late-night argument with Carrie Symonds", TitleId = 2 },
                        new { Id = 14, Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), HeadLine = "Article piece 1", IsFeatured = true, AuthorId = 1, Body = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.", Img = "nature.jpg", Paragraph = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore", TitleId = 2 },
                        new { Id = 15, Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), HeadLine = "Article piece 2", IsFeatured = true, AuthorId = 1, Body = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.", Img = "nature.jpg", Paragraph = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore", TitleId = 2 },
                        new { Id = 16, Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), HeadLine = "Article piece 3", IsFeatured = true, AuthorId = 1, Body = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.", Img = "nature.jpg", Paragraph = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore", TitleId = 2 },
                        new { Id = 17, Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), HeadLine = "Article piece 4", IsFeatured = false, AuthorId = 1, Body = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.", Img = "nature.jpg", Paragraph = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore", TitleId = 2 },
                        new { Id = 18, Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), HeadLine = "Article piece 5", IsFeatured = false, AuthorId = 1, Body = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.", Img = "nature.jpg", Paragraph = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore", TitleId = 2 },
                        new { Id = 19, Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), HeadLine = "Article piece 6", IsFeatured = false, AuthorId = 1, Body = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.", Img = "nature.jpg", Paragraph = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore", TitleId = 2 },
                        new { Id = 20, Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), HeadLine = "Article piece 7", IsFeatured = false, AuthorId = 1, Body = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.", Img = "nature.jpg", Paragraph = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore", TitleId = 2 },
                        new { Id = 21, Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), GroupingId = 1, HeadLine = "Over 350 migrants on NGO ship Ocean Viking after new rescue in Mediterranean", IsFeatured = false, AuthorId = 1, Body = "", Img = "viking.jpg", Paragraph = "", TitleId = 9 }
                    );
                });

            modelBuilder.Entity("RNN.Models.Post", b =>
                {
                    b.HasBaseType("RNN.Models.Entry");


                    b.ToTable("Post");

                    b.HasDiscriminator().HasValue("Post");

                    b.HasData(
                        new { Id = 1, Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), HeadLine = "Test post: put all the content here for the post title 1", IsFeatured = true, Url = "" },
                        new { Id = 2, Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), HeadLine = "Test post: put all the content here for the post title 2", IsFeatured = true, Url = "" },
                        new { Id = 3, Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), HeadLine = "Test post: put all the content here for the post title 3", IsFeatured = true, Url = "" },
                        new { Id = 4, Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), HeadLine = "Test post: put all the content here for the post title 4", IsFeatured = true, Url = "" },
                        new { Id = 5, Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), HeadLine = "Test post: put all the content here for the post title 5", IsFeatured = true, Url = "" },
                        new { Id = 6, Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), HeadLine = "Test post: put all the content here for the post title 6", IsFeatured = true, Url = "" },
                        new { Id = 7, Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), HeadLine = "Test post: put all the content here for the post title 7", IsFeatured = true, Url = "" },
                        new { Id = 8, Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), HeadLine = "Test post: put all the content here for the post title 8", IsFeatured = true, Url = "" },
                        new { Id = 9, Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), HeadLine = "Test post: put all the content here for the post title 9", IsFeatured = true, Url = "" },
                        new { Id = 10, Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), HeadLine = "Test post: put all the content here for the post title 10", IsFeatured = true, Url = "" },
                        new { Id = 11, Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), HeadLine = "Test post: put all the content here for the post title 11", IsFeatured = true, Url = "" }
                    );
                });

            modelBuilder.Entity("RNN.Models.Entry", b =>
                {
                    b.HasOne("RNN.Models.Grouping", "Grouping")
                        .WithMany()
                        .HasForeignKey("GroupingId");
                });

            modelBuilder.Entity("RNN.Models.EntryToTopic", b =>
                {
                    b.HasOne("RNN.Models.Entry", "Entry")
                        .WithMany("ArticleToTopics")
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RNN.Models.Topic", "Topic")
                        .WithMany("ArticleToTopic")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RNN.Models.Article", b =>
                {
                    b.HasOne("RNN.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("RNN.Models.Title", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId");
                });
#pragma warning restore 612, 618
        }
    }
}
